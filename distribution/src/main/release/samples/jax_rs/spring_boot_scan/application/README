== Spring Boot - Samples - CXF Rest Web Services 

This sample project demonstrates how to use CXF JAX-RS services
with Spring Boot. This demo has two JAX-RS class resources being auto-discovered 
and deployed in a single JAX-RS endpoint. 

The application registers itself with Eureka Registry.  

The client discovers the client address from the registry and invokes it.

The sample uses Maven. It can be built and run from the command line.

To run the client from a command line:

1. If you have not started a eureka-registry application then build and start it 
first in the eureka-registry folder in a separate terminal window:

$ mvn spring-boot:run

2. Run the server 
----
$ mvn -Pserver
----

3. Check that the server is deployed:

http://localhost:8080/services/helloservice/sayHello/ApacheCxfUser

will display "Hello ApacheCxfUser, Welcome to CXF RS Spring Boot World!!!"

http://localhost:8080/services/helloservice/sayHello2/ApacheCxfUser

will display "Hello2 ApacheCxfUser, Welcome to CXF RS Spring Boot World!!!"

Check client/README on how to run a command line client.

4. Swagger JSON and UI

http://localhost:8080/services/helloservice/swagger.json will return a Swagger JSON
description of services.

To view the Swagger document using Swagger-UI, use your Browser to 
open the Swagger-UI page at

  http://localhost:8080/services/helloservice/api-docs?url=/services/helloservice/swagger.json

or access it from the CXF Services page:

  http://localhost:8080/services/helloservice/info
  and follow a Swagger link.
(Note - CXF Services page is available by default at the path ending with "/services" - but in this demo
it has been configured to listen at "/info")

5. System metrics and health checks

http://localhost:8080/system/metrics 

will expose all registered Spring Actuator metrics 

http://localhost:8080/system/health 

will expose all registered Spring Actuator health checks


