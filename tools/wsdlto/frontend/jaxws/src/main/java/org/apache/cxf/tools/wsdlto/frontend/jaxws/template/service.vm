## Licensed to the Apache Software Foundation (ASF) under one
## or more contributor license agreements. See the NOTICE file
## distributed with this work for additional information
## regarding copyright ownership. The ASF licenses this file
## to you under the Apache License, Version 2.0 (the
## "License"); you may not use this file except in compliance
## with the License. You may obtain a copy of the License at
##
## http://www.apache.org/licenses/LICENSE-2.0
##
## Unless required by applicable law or agreed to in writing,
## software distributed under the License is distributed on an
## "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
## KIND, either express or implied. See the License for the
## specific language governing permissions and limitations
## under the License.
#if ($service.packageJavaDoc != "")
/*
$service.packageJavaDoc
 */
#end
package $service.PackageName;

#if ($wsdlLocation != "" && not($useGetResource) && not($wsdlLocation.startsWith("classpath:")))
import java.net.MalformedURLException;
#end
import java.net.URL;
#if ($markGenerated == "true")
import javax.annotation.Generated;
#end
import javax.xml.namespace.QName;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;
#foreach ($import in ${service.Imports})
import ${import};
#end
#if ($serviceTarget == "cxf")
import org.apache.cxf.Bus;
import org.apache.cxf.common.logging.LogUtils;
#end

/**
#if ($service.classJavaDoc != "")
$service.classJavaDoc
 *
#end
 * This class was generated by $fullversion
 #if ($suppressGeneratedDate != "true")
 * $currentdate
#end
 * Generated source version: $version
 *
 */
@WebServiceClient(name = "${service.ServiceName}",
#if ($wsdlLocation != "")
                  wsdlLocation = "$wsdlLocation",
#end
                  targetNamespace = "$service.Namespace")
#foreach ($annotation in $service.Annotations)
$annotation
#end
#if ($markGenerated == "true")
@Generated(value = "org.apache.cxf.tools.wsdlto.WSDLToJava", date = "$currentdate", comments = "$fullversion")
#end
public class ${service.Name} extends ${serviceSuperclass} {

#if ($markGenerated == "true")
    @Generated(value = "org.apache.cxf.tools.wsdlto.WSDLToJava", date = "$currentdate")
#end
    public final static URL WSDL_LOCATION;

#if ($markGenerated == "true")
    @Generated(value = "org.apache.cxf.tools.wsdlto.WSDLToJava", date = "$currentdate")
#end
    public final static QName SERVICE = new QName("$service.Namespace", "$service.ServiceName");
#foreach ($port in ${service.Ports})
#if ($markGenerated == "true")
    @Generated(value = "org.apache.cxf.tools.wsdlto.WSDLToJava", date = "$currentdate")
#end
    public final static QName $port.Name = new QName("$service.Namespace", "$port.PortName");
#end
    static {
#if ($wsdlLocation == "")
        WSDL_LOCATION = null;
#elseif ($wsdlLocation == "null")
        WSDL_LOCATION = null;
#elseif ($wsdlLocation.startsWith("classpath:"))
        URL url = ${service.Name}.class.getClassLoader().getResource("$wsdlLocation.substring(10)");
#if ($wsdlLocation.startsWith("classpath:/"))
        if (url == null) {
            url = ${service.Name}.class.getClassLoader().getResource("$wsdlLocation.substring(11)");
        }
#end
        if (url == null) {
#if ($serviceTarget == "cxf")
            LogUtils.getL7dLogger(${service.Name}.class)
#else
            java.util.logging.Logger.getLogger(${service.Name}.class.getName())
#end
                .log(java.util.logging.Level.INFO,
                     "Can not initialize the default wsdl from {0}", "$wsdlLocation");
        }
        WSDL_LOCATION = url;
#elseif ($useGetResource)
        URL url = ${service.Name}.class.getResource("$wsdlLocation");
        if (url == null) {
            url = ${service.Name}.class.getClassLoader().getResource("$wsdlLocation");
        }
        if (url == null) {
#if ($serviceTarget == "cxf")
            LogUtils.getL7dLogger(${service.Name}.class)
#else
            java.util.logging.Logger.getLogger(${service.Name}.class.getName())
#end
                .log(java.util.logging.Level.INFO,
                     "Can not initialize the default wsdl from {0}", "$wsdlLocation");
        }
        WSDL_LOCATION = url;
#else
        URL url = null;
        try {
            url = new URL("$wsdlLocation");
        } catch (MalformedURLException e) {
#if ($serviceTarget == "cxf")
            LogUtils.getL7dLogger(${service.Name}.class)
#else
            java.util.logging.Logger.getLogger(${service.Name}.class.getName())
#end
                .log(java.util.logging.Level.INFO,
                     "Can not initialize the default wsdl from {0}", "$wsdlLocation");
        }
        WSDL_LOCATION = url;
#end
    }

#if ($serviceTarget == "cxf")
#if ($markGenerated == "true")
    @Generated(value = "org.apache.cxf.tools.wsdlto.WSDLToJava", date = "$currentdate")
#end
    public ${service.Name}(Bus bus, WebServiceFeature ... features) {
        super(bus, WSDL_LOCATION, SERVICE, features);
    }

#if ($markGenerated == "true")
    @Generated(value = "org.apache.cxf.tools.wsdlto.WSDLToJava", date = "$currentdate")
#end
    public ${service.Name}(Bus bus, URL wsdlLocation, WebServiceFeature ... features) {
        super(bus, wsdlLocation, SERVICE, features);
    }

#if ($markGenerated == "true")
    @Generated(value = "org.apache.cxf.tools.wsdlto.WSDLToJava", date = "$currentdate")
#end
    public ${service.Name}(Bus bus, URL wsdlLocation, QName serviceName, WebServiceFeature ... features) {
        super(bus, wsdlLocation, serviceName, features);
    }
#else
#if ($markGenerated == "true")
    @Generated(value = "org.apache.cxf.tools.wsdlto.WSDLToJava", date = "$currentdate")
#end
    public ${service.Name}(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

#if ($markGenerated == "true")
    @Generated(value = "org.apache.cxf.tools.wsdlto.WSDLToJava", date = "$currentdate")
#end
    public ${service.Name}(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

#if ($markGenerated == "true")
    @Generated(value = "org.apache.cxf.tools.wsdlto.WSDLToJava", date = "$currentdate")
#end
    public ${service.Name}() {
        super(WSDL_LOCATION, SERVICE);
    }
#end

#if ($jaxws22 || $serviceTarget == "cxf")
#if ($markGenerated == "true")
    @Generated(value = "org.apache.cxf.tools.wsdlto.WSDLToJava", date = "$currentdate")
#end
    public ${service.Name}(WebServiceFeature ... features) {
        super(WSDL_LOCATION, SERVICE, features);
    }

#if ($markGenerated == "true")
    @Generated(value = "org.apache.cxf.tools.wsdlto.WSDLToJava", date = "$currentdate")
#end
    public ${service.Name}(URL wsdlLocation, WebServiceFeature ... features) {
        super(wsdlLocation, SERVICE, features);
    }

#if ($markGenerated == "true")
    @Generated(value = "org.apache.cxf.tools.wsdlto.WSDLToJava", date = "$currentdate")
#end
    public ${service.Name}(URL wsdlLocation, QName serviceName, WebServiceFeature ... features) {
        super(wsdlLocation, serviceName, features);
    }
#end

#if ($frontend == "cxf")
#foreach ($portClassName in $cxfPortClassnames)
    /**
     * Proxy interface the extends ${portClassName} to also provide useful methods
     * without having to cast to the appropriate interface.
     */
#if ($markGenerated == "true")
    @Generated(value = "org.apache.cxf.tools.wsdlto.WSDLToJava", date = "$currentdate")
#end
    public interface ${portClassName}Proxy extends ${portClassName}, AutoCloseable, BindingProvider, Client {
    }
#end
#end

#foreach ($port in $service.Ports)
#set($portClassName = ${port.InterfaceClass})
#if ($portClassName == ${service.Name})
#set($portClassName = ${port.fullClassName})
#end

#if ($frontend == "cxf")
#set($portClassName = "${portClassName}Proxy")
#end

    /**
#if ($port.javaDoc != "")
$port.javaDoc
#end
     *
     * @return
     *     returns ${port.InterfaceClass}
     */
    @WebEndpoint(name = "${port.PortName}")
#if ($markGenerated == "true")
    @Generated(value = "org.apache.cxf.tools.wsdlto.WSDLToJava", date = "$currentdate")
#end
    public ${portClassName} ${port.MethodName}() {
        return super.getPort($port.Name, ${portClassName}.class);
    }

    /**
#if ($port.javaDoc != "")
$port.javaDoc
#end
     *
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns ${port.InterfaceClass}
     */
    @WebEndpoint(name = "${port.PortName}")
#if ($markGenerated == "true")
    @Generated(value = "org.apache.cxf.tools.wsdlto.WSDLToJava", date = "$currentdate")
#end
    public ${portClassName} ${port.MethodName}(WebServiceFeature... features) {
        return super.getPort($port.Name, ${portClassName}.class, features);
    }
#end

}
